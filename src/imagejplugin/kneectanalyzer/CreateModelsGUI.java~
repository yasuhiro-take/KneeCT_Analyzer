package imagejplugin.kneectanalyzer;

import java.awt.EventQueue;

import javax.swing.JFrame;

import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.RowSpec;
import com.jgoodies.forms.factories.FormFactory;

import javax.swing.JLabel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JSeparator;
import javax.swing.JTextField;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.concurrent.ExecutionException;

import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import edu.osaka.ort.kca.ij.IJIF;


public class TestGUIawt {

	private JFrame frame;
	private JButton btn_1, btn_2, btn_3, btn_4, btn_open, btn_save, btn_close;
	private int status;
	private JTextPane messageBox;
	private ImageIcon arrowR, arrowD; // greenlight;
	private JLabel label_open, label_save;
	private JLabel label_1L, label_1R, label_2L, label_2R, label_3L, label_4L;
	private JLabel label_3R;
	private JLabel label_4R;
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					TestGUIawt window = new TestGUIawt();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public TestGUIawt() {
		status = 0;
		initialize();
		suggestion();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 350, 400);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(new FormLayout(new ColumnSpec[] {
				FormFactory.RELATED_GAP_COLSPEC,
				FormFactory.DEFAULT_COLSPEC,
				FormFactory.RELATED_GAP_COLSPEC,
				FormFactory.DEFAULT_COLSPEC,
				FormFactory.RELATED_GAP_COLSPEC,
				FormFactory.DEFAULT_COLSPEC,
				FormFactory.RELATED_GAP_COLSPEC,
				ColumnSpec.decode("max(56dlu;default):grow"),
				FormFactory.RELATED_GAP_COLSPEC,
				FormFactory.DEFAULT_COLSPEC,},
			new RowSpec[] {
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				FormFactory.DEFAULT_ROWSPEC,
				FormFactory.RELATED_GAP_ROWSPEC,
				RowSpec.decode("default:grow"),}));
		
		label_open = new JLabel("");
		//label_open.setIcon(new ImageIcon(TestGUIawt.class.getResource("/com/sun/java/swing/plaf/motif/icons/ScrollDownArrowActive.gif")));
		frame.getContentPane().add(label_open, "2, 2, center, default");
		arrowD = new ImageIcon(TestGUIawt.class.getResource("/com/sun/java/swing/plaf/motif/icons/ScrollDownArrowActive.gif"));
		
		label_save = new JLabel("");
		//label_save.setIcon(new ImageIcon(TestGUIawt.class.getResource("/com/sun/java/swing/plaf/motif/icons/ScrollDownArrowActive.gif")));
		frame.getContentPane().add(label_save, "4, 2, center, default");
		
		btn_open = new JButton("");
		btn_open.setIcon(new ImageIcon(TestGUIawt.class.getResource("/javax/swing/plaf/metal/icons/ocean/directory.gif")));
		frame.getContentPane().add(btn_open, "2, 4");
		btn_open.addActionListener(new btnActionListener());
		
		btn_save = new JButton("");
		btn_save.setIcon(new ImageIcon(TestGUIawt.class.getResource("/javax/swing/plaf/metal/icons/ocean/floppy.gif")));
		frame.getContentPane().add(btn_save, "4, 4");
		btn_save.addActionListener(new btnActionListener());
		
		btn_close = new JButton("");
		btn_close.setIcon(new ImageIcon(TestGUIawt.class.getResource("/javax/swing/plaf/metal/icons/ocean/close.gif")));
		frame.getContentPane().add(btn_close, "6, 4");
		btn_close.addActionListener(new btnActionListener());
		
		JButton button_q = new JButton("");
		button_q.setIcon(new ImageIcon(TestGUIawt.class.getResource("/javax/swing/plaf/metal/icons/ocean/question.png")));
		frame.getContentPane().add(button_q, "10, 4");
		
		JSeparator separator = new JSeparator();
		frame.getContentPane().add(separator, "2, 6, 9, 1");
		
		label_1L = new JLabel("");
		//label_1L.setIcon(new ImageIcon(TestGUIawt.class.getResource("/com/sun/java/swing/plaf/motif/icons/ScrollRightArrow.gif")));
		frame.getContentPane().add(label_1L, "2, 8, center, default");
		arrowR = new ImageIcon(TestGUIawt.class.getResource("/com/sun/java/swing/plaf/motif/icons/ScrollRightArrow.gif"));
		
		btn_1 = new JButton("Binarize");
		/* btn_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});*/
		frame.getContentPane().add(btn_1, "4, 8, 5, 1");
		btn_1.addActionListener(new btnActionListener());
		
		label_1R = new JLabel("");
		//label_1R.setIcon(new ImageIcon(TestGUIawt.class.getResource("/com/sun/java/swing/plaf/gtk/resources/gtk-yes-4.png")));
		frame.getContentPane().add(label_1R, "10, 8, center, default");
		//greenlight = new ImageIcon(TestGUIawt.class.getResource("/com/sun/java/swing/plaf/gtk/resources/gtk-yes-4.png"));
		
		label_2L = new JLabel("");
		frame.getContentPane().add(label_2L, "2, 10");
		
		btn_2 = new JButton("Align by MPR");
		frame.getContentPane().add(btn_2, "4, 10, 5, 1");
		btn_2.addActionListener(new btnActionListener());
		
		label_2R = new JLabel("");
		frame.getContentPane().add(label_2R, "10, 10, center, default");
		
		label_3L = new JLabel("");
		frame.getContentPane().add(label_3L, "2, 12");
		
		btn_3 = new JButton("Align by 3D");
		frame.getContentPane().add(btn_3, "4, 12, 5, 1");
		btn_3.addActionListener(new btnActionListener());
		
		label_3R = new JLabel("");
		frame.getContentPane().add(label_3R, "10, 12, center, default");
		
		label_4L = new JLabel("");
		frame.getContentPane().add(label_4L, "2, 14");
		
		btn_4 = new JButton("Create specific models");
		frame.getContentPane().add(btn_4, "4, 14, 5, 1");
		btn_4.addActionListener(new btnActionListener());
		
		label_4R = new JLabel("");
		frame.getContentPane().add(label_4R, "10, 14, center, default");
		
		JSeparator separator_1 = new JSeparator();
		frame.getContentPane().add(separator_1, "2, 16, 9, 1");
		
		messageBox = new JTextPane();
		messageBox.setEditable(false);
		frame.getContentPane().add(messageBox, "2, 18, 9, 1, fill, fill");
	}
	
	class btnActionListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			Object o = e.getSource();
			char btn = ' ';
			
			if (o == btn_open) btn = 'o';
			else if (o == btn_save) btn = 's';
			else if (o == btn_close) btn = 'c';
			else if (o == btn_1) btn = '1';
			else if (o == btn_2) btn = '2';
			else if (o == btn_3) btn = '3';
			else if (o == btn_4) btn = '4';
			
			btnSwingWorker sw = new btnSwingWorker(btn);
			sw.execute();
		}
	}
	
	class btnSwingWorker extends SwingWorker<Integer, Object> {
		private char btn;
		public btnSwingWorker(char btnType) 
		{
			btn = btnType;
			
			frame.getGlassPane().addMouseListener(new MouseAdapter() {
				public void mousePressed(MouseEvent e) {
					e.consume();
				}
			});
			frame.getGlassPane().setVisible(true);
		}
		
		@Override
		public Integer doInBackground() {
			int r = -1;
			
			switch(btn) {
			case 'o':
				IJIF.openDirectoryDialog();
				break;
			case 's':
				IJIF.saveModel();
				break;
			case 'c':
				IJIF.closeWorkingFiles();
				break;
			case '1':
				r = IJIF.binarize();
				break;
			case '2':
				r = IJIF.alignMPR();
				break;
			case '3':
				r = IJIF.align3D();
				break;
			case '4':
				r = IJIF.interactiveEditing();
				break;
			} 
			
			return (Integer)(r);
		}
		
		@Override
		protected void done() {
			Integer r;
			
			try {
				r = get();
			} catch (InterruptedException ex) {
				r = -1;
			} catch (ExecutionException ex) {
				r = -1;
			}
			
			switch(btn) {
				case 'o':
					//if (IJIF.isStack() && IJIF.isBin()) {
					if (false) {
						messageBox.setText("The opened stack-image seems already binary. You can skip *Binarize*, and may want to proceed *Align by MPR* or *Align by 3D*.");
						resetLabelIcons();
						label_2L.setIcon(arrowR);
					//} else if (IJIF.isStack() && !IJIF.isBin()) {
					} else if (true) {
						messageBox.setText("You may want to proceed *Binarize* the currently opened stack-iamge.");
						resetLabelIcons();
						label_1L.setIcon(arrowR);
					} else if (!IJIF.isStack()) {
						messageBox.setText("Stack-iamge is needed.");
					}
					
					break;
				case 's':
					if (status == 8) {
						messageBox.setText("If you want to create another Models, close the working files (*X icon*), then open another stacked-image (*folder icon*).\n" +
								"Otherwise, terminate this launcher (just close the window).");
					
					}
					break;
				case 'c':
					status = 0;
					resetLabelIcons();
					suggestion();
					break;
				case '1':
					status |= 1; // Binarize
					//label_1R.setIcon(greenlight);
					suggestion();
					break;
				case '2':
					if (r == -1) {
						status |= 2; // Align by MPR
						//label_2R.setIcon(greenlight);
						suggestion();
					} else {
						status = -1;
						suggestion();
					}
			
					break;
				case '3':
					status |= 4; // align by 3D
					//label_3R.setIcon(greenlight);
					suggestion();
					break;
				case '4':
					status = 8; // CreateSpecificModels
					//label_4R.setIcon(greenlight);
					suggestion();
					break;
			}
			
			frame.getGlassPane().setVisible(false);
            MouseListener[] listeners = frame.getGlassPane().getMouseListeners();
            
            for (MouseListener listener: listeners) {
                frame.getGlassPane().removeMouseListener(listener);
            }
			
		}
	}
	
	private void resetLabelIcons()
	{
		label_open.setIcon(null);
		label_save.setIcon(null);
		label_1L.setIcon(null);
		label_2L.setIcon(null);
		label_3L.setIcon(null);
		label_4L.setIcon(null);
	}
	
	public void suggestion()
	{
		resetLabelIcons();
		
		switch (status) {
		case 0:
			
			if (IJIF.isStack()) {
				if (IJIF.isBin()) {
					messageBox.setText("Current Active image is a binary stack. You may want to directly proceed to *Align* commands.");
					label_2L.setIcon(arrowR);
					label_3L.setIcon(arrowR);
				} else {
					messageBox.setText("Current Active image is a non-binary stack. You may want to *Binarize* it.");
					label_1L.setIcon(arrowR);
				} 
			} else {
				messageBox.setText("Current Active image is not a stack, or no stack image is found.\n" + 
									"You may want to open DICOM directory (*folder icon*).");
				label_open.setIcon(arrowD);
			}
			break;
		case 1:
			// after binarize 
			messageBox.setText("Now you may want to align the image by either *Align by MPR* or *Aign by 3D*.");
			label_2L.setIcon(arrowR);
			label_3L.setIcon(arrowR);
			break;
		case 2:
		case 4:
		case 6:
			// after align-MPR or 3D; no binarize
			/* if the model is binary { status |= 1; goto case 3 or 5; }
			 * otherwise, warn; 
			 */
			if (IJIF.isBin()) {
				;
			} else {
				messageBox.setText("it's not a binary image; you should convert it to binary.\n" +
									"Then you may want to proceed *Create specific models*");
				label_1L.setIcon(arrowR);
				break;
			}
		case 3: // after binarize + align-MPR
		case 5: // after binarize + align-3D
		case 7: // after binarize + align-mPR + 3D
			messageBox.setText("Base model were created. You can save the Base model (*floppydisk icon*).\n" +
					"Then you may want to proceed *Create specific models*");
			label_save.setIcon(arrowD);
			label_4L.setIcon(arrowR);
			break;
		case 8: // after Create specific models
			messageBox.setText("All models were created. You can save the models (*floppydisk*).\n");
			label_save.setIcon(arrowD);
			break;
		case -1: // macro returned error;
			messageBox.setText("Unsuccessful finishing of a sublet command. This launcher no longer can help you. Sorry.");
			break;
		}
	}

}

/*
private void btnDo(char c)
{
	switch (c) {
	case 'o':
		
		IJIF.openDirectoryDialog();
		
		// if (IJIF.isStack() && IJIF.isBin())
			messageBox.setText("You may want to proceed *Binarize* the currently opened stack-iamge.");
			
			resetLabelIcons(true);
			label_1L.setIcon(arrowR);
		break;
	case 's':
		IJIF.saveModel();
		if (status == 8) {
			messageBox.setText("If you want to create another Models, close the working files (*X icon*), then open another stacked-image (*folder icon*).\n" +
								"Otherwise, terminate this launcher (just close the window).");
			
		}
		break;
	case 'c':
		IJIF.closeWorkingFiles();
		status = 0;
		resetLabelIcons(true);
		suggestion();
		break;
	case '1':
		IJIF.binarize();
		status |= 1; // Binarize
		label_1R.setIcon(greenlight);
		suggestion();
		break;
	case '2':
		if (IJIF.alignMPR() == 0) {
			status |= 2; // Align by MPR
			label_2R.setIcon(greenlight);
			suggestion();
		} else {
			status = -1;
			suggestion();
		}
		break;
	case '3':
		IJIF.align3D();
		status |= 4; // align by 3D
		label_3R.setIcon(greenlight);
		suggestion();
		break;
	case '4':
		IJIF.interactiveEditing();
		status = 8; // CreateSpecificModels
		label_4R.setIcon(greenlight);
		suggestion();
		break;
	}
}

private void resetLabelIcons(boolean resetGL)
	{
		label_open.setIcon(null);
		label_save.setIcon(null);
		label_1L.setIcon(null);
		label_2L.setIcon(null);
		label_3L.setIcon(null);
		label_4L.setIcon(null);
		
		if (resetGL) {
			label_1R.setIcon(null);
			label_2R.setIcon(null);
			label_3R.setIcon(null);
			label_4R.setIcon(null);
		}
	}
*/
